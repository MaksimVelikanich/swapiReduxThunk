{"ast":null,"code":"// aboutFilmActions.js\nimport { setFilmDetails } from './aboutFilmReducer';\nconst fetchFilmDetails = id => async dispatch => {\n  try {\n    dispatch(setLoading(true));\n    const response = await fetch(`https://swapi.dev/api/films/${id}/`);\n    if (!response.ok) {\n      throw new Error(`Error fetching film details: ${response.statusText}`);\n    }\n    const filmData = await response.json();\n    const charactersData = await Promise.all(filmData.characters.map(async url => {\n      const characterResponse = await fetch(url);\n      return characterResponse.json();\n    }));\n    const planetsData = await Promise.all(filmData.planets.map(async url => {\n      const planetResponse = await fetch(url);\n      return planetResponse.json();\n    }));\n    const starshipsData = await Promise.all(filmData.starships.map(async url => {\n      const starshipResponse = await fetch(url);\n      return starshipResponse.json();\n    }));\n    const vehiclesData = await Promise.all(filmData.vehicles.map(async url => {\n      const vehicleResponse = await fetch(url);\n      return vehicleResponse.json();\n    }));\n    const speciesData = await Promise.all(filmData.species.map(async url => {\n      const speciesResponse = await fetch(url);\n      return speciesResponse.json();\n    }));\n    dispatch(setFilmDetails({\n      film: filmData,\n      characters: charactersData,\n      planets: planetsData,\n      starships: starshipsData,\n      vehicles: vehiclesData,\n      species: speciesData\n    }));\n    dispatch(setLoading(false));\n  } catch (error) {\n    console.error('Error fetching film details:', error);\n    dispatch(setLoading(false));\n  }\n};","map":{"version":3,"names":["setFilmDetails","fetchFilmDetails","id","dispatch","setLoading","response","fetch","ok","Error","statusText","filmData","json","charactersData","Promise","all","characters","map","url","characterResponse","planetsData","planets","planetResponse","starshipsData","starships","starshipResponse","vehiclesData","vehicles","vehicleResponse","speciesData","species","speciesResponse","film","error","console"],"sources":["/Users/a1/react/swapi/src/store/aboutFilmActions.js"],"sourcesContent":["// aboutFilmActions.js\nimport { setFilmDetails } from './aboutFilmReducer';\n\n\n const fetchFilmDetails = (id) => async (dispatch) => {\n    try {\n      dispatch(setLoading(true));\n  \n      const response = await fetch(`https://swapi.dev/api/films/${id}/`);\n  \n      if (!response.ok) {\n        throw new Error(`Error fetching film details: ${response.statusText}`);\n      }\n  \n      const filmData = await response.json();\n\n      const charactersData = await Promise.all(\n        filmData.characters.map(async (url) => {\n          const characterResponse = await fetch(url);\n          return characterResponse.json();\n        })\n      );\n\n      const planetsData = await Promise.all(\n        filmData.planets.map(async (url) => {\n          const planetResponse = await fetch(url);\n          return planetResponse.json();\n        })\n      );\n\n      const starshipsData = await Promise.all(\n        filmData.starships.map(async (url) => {\n          const starshipResponse = await fetch(url);\n          return starshipResponse.json();\n        })\n      );\n\n      const vehiclesData = await Promise.all(\n        filmData.vehicles.map(async (url) => {\n          const vehicleResponse = await fetch(url);\n          return vehicleResponse.json();\n        })\n      );\n\n      const speciesData = await Promise.all(\n        filmData.species.map(async (url) => {\n          const speciesResponse = await fetch(url);\n          return speciesResponse.json();\n        })\n      );\n\n      dispatch(\n        setFilmDetails({\n          film: filmData,\n          characters: charactersData,\n          planets: planetsData,\n          starships: starshipsData,\n          vehicles: vehiclesData,\n          species: speciesData,\n        })\n      );\n  \n      dispatch(setLoading(false));\n    } catch (error) {\n      console.error('Error fetching film details:', error);\n      dispatch(setLoading(false));\n    }\n  };\n\n"],"mappings":"AAAA;AACA,SAASA,cAAc,QAAQ,oBAAoB;AAGlD,MAAMC,gBAAgB,GAAIC,EAAE,IAAK,MAAOC,QAAQ,IAAK;EAClD,IAAI;IACFA,QAAQ,CAACC,UAAU,CAAC,IAAI,CAAC,CAAC;IAE1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,+BAA8BJ,EAAG,GAAE,CAAC;IAElE,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAE,gCAA+BH,QAAQ,CAACI,UAAW,EAAC,CAAC;IACxE;IAEA,MAAMC,QAAQ,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAEtC,MAAMC,cAAc,GAAG,MAAMC,OAAO,CAACC,GAAG,CACtCJ,QAAQ,CAACK,UAAU,CAACC,GAAG,CAAC,MAAOC,GAAG,IAAK;MACrC,MAAMC,iBAAiB,GAAG,MAAMZ,KAAK,CAACW,GAAG,CAAC;MAC1C,OAAOC,iBAAiB,CAACP,IAAI,CAAC,CAAC;IACjC,CAAC,CACH,CAAC;IAED,MAAMQ,WAAW,GAAG,MAAMN,OAAO,CAACC,GAAG,CACnCJ,QAAQ,CAACU,OAAO,CAACJ,GAAG,CAAC,MAAOC,GAAG,IAAK;MAClC,MAAMI,cAAc,GAAG,MAAMf,KAAK,CAACW,GAAG,CAAC;MACvC,OAAOI,cAAc,CAACV,IAAI,CAAC,CAAC;IAC9B,CAAC,CACH,CAAC;IAED,MAAMW,aAAa,GAAG,MAAMT,OAAO,CAACC,GAAG,CACrCJ,QAAQ,CAACa,SAAS,CAACP,GAAG,CAAC,MAAOC,GAAG,IAAK;MACpC,MAAMO,gBAAgB,GAAG,MAAMlB,KAAK,CAACW,GAAG,CAAC;MACzC,OAAOO,gBAAgB,CAACb,IAAI,CAAC,CAAC;IAChC,CAAC,CACH,CAAC;IAED,MAAMc,YAAY,GAAG,MAAMZ,OAAO,CAACC,GAAG,CACpCJ,QAAQ,CAACgB,QAAQ,CAACV,GAAG,CAAC,MAAOC,GAAG,IAAK;MACnC,MAAMU,eAAe,GAAG,MAAMrB,KAAK,CAACW,GAAG,CAAC;MACxC,OAAOU,eAAe,CAAChB,IAAI,CAAC,CAAC;IAC/B,CAAC,CACH,CAAC;IAED,MAAMiB,WAAW,GAAG,MAAMf,OAAO,CAACC,GAAG,CACnCJ,QAAQ,CAACmB,OAAO,CAACb,GAAG,CAAC,MAAOC,GAAG,IAAK;MAClC,MAAMa,eAAe,GAAG,MAAMxB,KAAK,CAACW,GAAG,CAAC;MACxC,OAAOa,eAAe,CAACnB,IAAI,CAAC,CAAC;IAC/B,CAAC,CACH,CAAC;IAEDR,QAAQ,CACNH,cAAc,CAAC;MACb+B,IAAI,EAAErB,QAAQ;MACdK,UAAU,EAAEH,cAAc;MAC1BQ,OAAO,EAAED,WAAW;MACpBI,SAAS,EAAED,aAAa;MACxBI,QAAQ,EAAED,YAAY;MACtBI,OAAO,EAAED;IACX,CAAC,CACH,CAAC;IAEDzB,QAAQ,CAACC,UAAU,CAAC,KAAK,CAAC,CAAC;EAC7B,CAAC,CAAC,OAAO4B,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD7B,QAAQ,CAACC,UAAU,CAAC,KAAK,CAAC,CAAC;EAC7B;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}