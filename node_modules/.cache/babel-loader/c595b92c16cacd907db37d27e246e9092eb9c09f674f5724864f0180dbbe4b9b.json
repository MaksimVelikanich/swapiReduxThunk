{"ast":null,"code":"import { setFilmDetails } from './aboutFilmReducer';\nexport const setLoading = isLoading => ({\n  type: 'SET_LOADING',\n  payload: isLoading\n});\nexport const fetchFilmDetails = id => async dispatch => {\n  try {\n    dispatch(setLoading(true)); // Позначте завантаження як початкове\n\n    const response = await fetch(`https://swapi.dev/api/films/${id}/`);\n    const filmData = await response.json();\n    console.log(id + 'response');\n    const charactersData = await Promise.all(filmData.characters.map(async url => {\n      const characterResponse = await fetch(url);\n      return characterResponse.json();\n    }));\n    const planetsData = await Promise.all(filmData.planets.map(async url => {\n      const planetResponse = await fetch(url);\n      return planetResponse.json();\n    }));\n    const starshipsData = await Promise.all(filmData.starships.map(async url => {\n      const starshipResponse = await fetch(url);\n      return starshipResponse.json();\n    }));\n    const vehiclesData = await Promise.all(filmData.vehicles.map(async url => {\n      const vehicleResponse = await fetch(url);\n      return vehicleResponse.json();\n    }));\n    const speciesData = await Promise.all(filmData.species.map(async url => {\n      const speciesResponse = await fetch(url);\n      return speciesResponse.json();\n    }));\n    dispatch(setFilmDetails({\n      film: filmData,\n      characters: charactersData,\n      planets: planetsData,\n      starships: starshipsData,\n      vehicles: vehiclesData,\n      species: speciesData\n    }));\n    dispatch(setLoading(false)); // Позначте завантаження як завершене після завершення запиту\n  } catch (error) {\n    console.error('Error fetching film details:', error);\n    dispatch(setLoading(false));\n  }\n};","map":{"version":3,"names":["setFilmDetails","setLoading","isLoading","type","payload","fetchFilmDetails","id","dispatch","response","fetch","filmData","json","console","log","charactersData","Promise","all","characters","map","url","characterResponse","planetsData","planets","planetResponse","starshipsData","starships","starshipResponse","vehiclesData","vehicles","vehicleResponse","speciesData","species","speciesResponse","film","error"],"sources":["/Users/a1/react/swapi/src/store/aboutFilmActions.js"],"sourcesContent":["import { setFilmDetails } from './aboutFilmReducer';\n\nexport const setLoading = (isLoading) => ({\n    type: 'SET_LOADING',\n    payload: isLoading,\n  });\n\n\nexport const fetchFilmDetails = (id) => async (dispatch) => {\n  try {\n    dispatch(setLoading(true)); // Позначте завантаження як початкове\n    \n    const response = await fetch(`https://swapi.dev/api/films/${id}/`);\n    const filmData = await response.json();\n\n    \n    console.log(id + 'response');\n    const charactersData = await Promise.all(filmData.characters.map(async (url) => {\n      const characterResponse = await fetch(url);\n      return characterResponse.json();\n    }));\n\n    const planetsData = await Promise.all(filmData.planets.map(async (url) => {\n      const planetResponse = await fetch(url);\n      return planetResponse.json();\n    }));\n\n    const starshipsData = await Promise.all(filmData.starships.map(async (url) => {\n      const starshipResponse = await fetch(url);\n      return starshipResponse.json();\n    }));\n\n    const vehiclesData = await Promise.all(filmData.vehicles.map(async (url) => {\n      const vehicleResponse = await fetch(url);\n      return vehicleResponse.json();\n    }));\n\n    const speciesData = await Promise.all(filmData.species.map(async (url) => {\n      const speciesResponse = await fetch(url);\n      return speciesResponse.json();\n    }));\n\n    dispatch(setFilmDetails({\n      film: filmData,\n      characters: charactersData,\n      planets: planetsData,\n      starships: starshipsData,\n      vehicles: vehiclesData,\n      species: speciesData,\n    }));\n    dispatch(setLoading(false)); // Позначте завантаження як завершене після завершення запиту\n\n  } catch (error) {\n    console.error('Error fetching film details:', error);\n    dispatch(setLoading(false));  }\n};\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,oBAAoB;AAEnD,OAAO,MAAMC,UAAU,GAAIC,SAAS,KAAM;EACtCC,IAAI,EAAE,aAAa;EACnBC,OAAO,EAAEF;AACX,CAAC,CAAC;AAGJ,OAAO,MAAMG,gBAAgB,GAAIC,EAAE,IAAK,MAAOC,QAAQ,IAAK;EAC1D,IAAI;IACFA,QAAQ,CAACN,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;IAE5B,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAE,+BAA8BH,EAAG,GAAE,CAAC;IAClE,MAAMI,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAGtCC,OAAO,CAACC,GAAG,CAACP,EAAE,GAAG,UAAU,CAAC;IAC5B,MAAMQ,cAAc,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACN,QAAQ,CAACO,UAAU,CAACC,GAAG,CAAC,MAAOC,GAAG,IAAK;MAC9E,MAAMC,iBAAiB,GAAG,MAAMX,KAAK,CAACU,GAAG,CAAC;MAC1C,OAAOC,iBAAiB,CAACT,IAAI,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,MAAMU,WAAW,GAAG,MAAMN,OAAO,CAACC,GAAG,CAACN,QAAQ,CAACY,OAAO,CAACJ,GAAG,CAAC,MAAOC,GAAG,IAAK;MACxE,MAAMI,cAAc,GAAG,MAAMd,KAAK,CAACU,GAAG,CAAC;MACvC,OAAOI,cAAc,CAACZ,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,MAAMa,aAAa,GAAG,MAAMT,OAAO,CAACC,GAAG,CAACN,QAAQ,CAACe,SAAS,CAACP,GAAG,CAAC,MAAOC,GAAG,IAAK;MAC5E,MAAMO,gBAAgB,GAAG,MAAMjB,KAAK,CAACU,GAAG,CAAC;MACzC,OAAOO,gBAAgB,CAACf,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,MAAMgB,YAAY,GAAG,MAAMZ,OAAO,CAACC,GAAG,CAACN,QAAQ,CAACkB,QAAQ,CAACV,GAAG,CAAC,MAAOC,GAAG,IAAK;MAC1E,MAAMU,eAAe,GAAG,MAAMpB,KAAK,CAACU,GAAG,CAAC;MACxC,OAAOU,eAAe,CAAClB,IAAI,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,MAAMmB,WAAW,GAAG,MAAMf,OAAO,CAACC,GAAG,CAACN,QAAQ,CAACqB,OAAO,CAACb,GAAG,CAAC,MAAOC,GAAG,IAAK;MACxE,MAAMa,eAAe,GAAG,MAAMvB,KAAK,CAACU,GAAG,CAAC;MACxC,OAAOa,eAAe,CAACrB,IAAI,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEHJ,QAAQ,CAACP,cAAc,CAAC;MACtBiC,IAAI,EAAEvB,QAAQ;MACdO,UAAU,EAAEH,cAAc;MAC1BQ,OAAO,EAAED,WAAW;MACpBI,SAAS,EAAED,aAAa;MACxBI,QAAQ,EAAED,YAAY;MACtBI,OAAO,EAAED;IACX,CAAC,CAAC,CAAC;IACHvB,QAAQ,CAACN,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;EAE/B,CAAC,CAAC,OAAOiC,KAAK,EAAE;IACdtB,OAAO,CAACsB,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD3B,QAAQ,CAACN,UAAU,CAAC,KAAK,CAAC,CAAC;EAAG;AAClC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}