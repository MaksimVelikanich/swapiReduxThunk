{"ast":null,"code":"// AboutFilmAction.js\nimport axios from 'axios';\nexport const SET_FILM_DETAILS = 'SET_FILM_DETAILS';\nexport const SET_CHARACTERS = 'SET_CHARACTERS';\nexport const SET_CHARACTER_NAMES = 'SET_CHARACTER_NAMES';\nexport const SET_PLANETS = 'SET_PLANETS';\nexport const SET_STARSHIPS_NAMES = 'SET_STARSHIPS_NAMES';\nexport const SET_STARSHIPS = 'SET_STARSHIPS';\nexport const SET_VEHICLES = 'SET_VEHICLES';\nexport const SET_SPECIES = 'SET_SPECIES';\nexport const setFilmDetails = filmDetails => ({\n  type: SET_FILM_DETAILS,\n  payload: filmDetails\n});\nexport const setCharacters = characters => ({\n  type: SET_CHARACTERS,\n  payload: characters\n});\nexport const setCharacterNames = characterNames => ({\n  type: SET_CHARACTER_NAMES,\n  payload: characterNames\n});\nexport const setPlanets = planets => ({\n  type: SET_PLANETS,\n  payload: planets\n});\nexport const setStarships = starships => ({\n  type: SET_STARSHIPS,\n  payload: starships\n});\nexport const setVehicles = vehicles => ({\n  type: SET_VEHICLES,\n  payload: vehicles\n});\nexport const setSpecies = species => ({\n  type: SET_SPECIES,\n  payload: species\n});\nexport const fetchFilmDetails = filmId => async dispatch => {\n  try {\n    const response = await axios.get(`https://swapi.dev/api/films/${filmId}`);\n    const filmData = response.data;\n    console.log(\"filmData:\", filmData);\n    const charactersRequests = filmData.characters.map(characterUrl => axios.get(characterUrl));\n    const planetsRequests = filmData.planets.map(planetUrl => axios.get(planetUrl));\n    const starshipsRequests = filmData.starships.map(starshipUrl => axios.get(starshipUrl));\n    const vehiclesRequests = filmData.vehicles.map(vehicleUrl => axios.get(vehicleUrl));\n    const speciesRequests = filmData.species.map(specieUrl => axios.get(specieUrl));\n    const [charactersResponse, planetsResponse, starshipsResponse, vehiclesResponse, speciesResponse] = await Promise.all([Promise.all(charactersRequests), Promise.all(planetsRequests), Promise.all(starshipsRequests), Promise.all(vehiclesRequests), Promise.all(speciesRequests)]);\n    const charactersData = charactersResponse.map(characterResponse => ({\n      name: characterResponse.data.name,\n      url: characterResponse.data.url\n    }));\n    const planetsData = planetsResponse.map(planetResponse => planetResponse.data);\n    const starshipsData = starshipsResponse.map(starshipResponse => starshipResponse.data);\n    const vehiclesData = vehiclesResponse.map(vehicleResponse => vehicleResponse.data);\n    const speciesData = speciesResponse.map(specieResponse => specieResponse.data);\n    const filmsDetailsData = {\n      title: filmData.title,\n      episode_id: filmData.episode_id,\n      opening_crawl: filmData.opening_crawl,\n      director: filmData.director,\n      producer: filmData.producer,\n      release_date: filmData.release_date,\n      characters: charactersData,\n      planets: planetsData,\n      species: speciesData,\n      starships: starshipsData,\n      vehicles: vehiclesData\n    };\n    dispatch(setFilmDetails(filmsDetailsData));\n    dispatch(setCharacters(charactersData));\n    dispatch(setCharacterNames(charactersData.map(character => character.name)));\n    dispatch(setPlanets(planetsData.map(planet => planet.name)));\n    dispatch(setStarships(starshipsData));\n    dispatch(setVehicles(vehiclesData));\n    dispatch(setSpecies(speciesData));\n  } catch (error) {\n    console.error('Error fetching film details:', error);\n    console.error('Response:', error.response);\n  }\n};","map":{"version":3,"names":["axios","SET_FILM_DETAILS","SET_CHARACTERS","SET_CHARACTER_NAMES","SET_PLANETS","SET_STARSHIPS_NAMES","SET_STARSHIPS","SET_VEHICLES","SET_SPECIES","setFilmDetails","filmDetails","type","payload","setCharacters","characters","setCharacterNames","characterNames","setPlanets","planets","setStarships","starships","setVehicles","vehicles","setSpecies","species","fetchFilmDetails","filmId","dispatch","response","get","filmData","data","console","log","charactersRequests","map","characterUrl","planetsRequests","planetUrl","starshipsRequests","starshipUrl","vehiclesRequests","vehicleUrl","speciesRequests","specieUrl","charactersResponse","planetsResponse","starshipsResponse","vehiclesResponse","speciesResponse","Promise","all","charactersData","characterResponse","name","url","planetsData","planetResponse","starshipsData","starshipResponse","vehiclesData","vehicleResponse","speciesData","specieResponse","filmsDetailsData","title","episode_id","opening_crawl","director","producer","release_date","character","planet","error"],"sources":["/Users/a1/react/swapi/src/store/aboutFilmActions.js"],"sourcesContent":["// AboutFilmAction.js\nimport axios from 'axios';\n\nexport const SET_FILM_DETAILS = 'SET_FILM_DETAILS';\nexport const SET_CHARACTERS = 'SET_CHARACTERS';\nexport const SET_CHARACTER_NAMES = 'SET_CHARACTER_NAMES';\nexport const SET_PLANETS = 'SET_PLANETS';\nexport const SET_STARSHIPS_NAMES = 'SET_STARSHIPS_NAMES';\nexport const SET_STARSHIPS = 'SET_STARSHIPS';\nexport const SET_VEHICLES = 'SET_VEHICLES';\nexport const SET_SPECIES = 'SET_SPECIES';\n\nexport const setFilmDetails = (filmDetails) => ({\n  type: SET_FILM_DETAILS,\n  payload: filmDetails,\n});\n\nexport const setCharacters = (characters) => ({\n  type: SET_CHARACTERS,\n  payload: characters,\n});\n\nexport const setCharacterNames = (characterNames) => ({\n  type: SET_CHARACTER_NAMES,\n  payload: characterNames,\n});\n\nexport const setPlanets = (planets) => ({\n  type: SET_PLANETS,\n  payload: planets,\n});\n\nexport const setStarships = (starships) => ({\n  type: SET_STARSHIPS,\n  payload: starships,\n});\n\nexport const setVehicles = (vehicles) => ({\n  type: SET_VEHICLES,\n  payload: vehicles,\n});\n\nexport const setSpecies = (species) => ({\n  type: SET_SPECIES,\n  payload: species,\n});\n\nexport const fetchFilmDetails = (filmId) => async (dispatch) => {\n  try {\n    const response = await axios.get(`https://swapi.dev/api/films/${filmId}`);\n    const filmData = response.data;\n    console.log(\"filmData:\", filmData);\n\n    const charactersRequests = filmData.characters.map(characterUrl => axios.get(characterUrl));\n    const planetsRequests = filmData.planets.map(planetUrl => axios.get(planetUrl));\n    const starshipsRequests = filmData.starships.map(starshipUrl => axios.get(starshipUrl));\n    const vehiclesRequests = filmData.vehicles.map(vehicleUrl => axios.get(vehicleUrl));\n    const speciesRequests = filmData.species.map(specieUrl => axios.get(specieUrl));\n\n    const [\n      charactersResponse,\n      planetsResponse,\n      starshipsResponse,\n      vehiclesResponse,\n      speciesResponse,\n    ] = await Promise.all([\n      Promise.all(charactersRequests),\n      Promise.all(planetsRequests),\n      Promise.all(starshipsRequests),\n      Promise.all(vehiclesRequests),\n      Promise.all(speciesRequests),\n    ]);\n\n    const charactersData = charactersResponse.map(characterResponse => ({\n      name: characterResponse.data.name,\n      url: characterResponse.data.url,\n    }));\n\n    const planetsData = planetsResponse.map(planetResponse => planetResponse.data);\n    const starshipsData = starshipsResponse.map(starshipResponse => starshipResponse.data);\n    const vehiclesData = vehiclesResponse.map(vehicleResponse => vehicleResponse.data);\n    const speciesData = speciesResponse.map(specieResponse => specieResponse.data);\n\n    const filmsDetailsData = {\n      title: filmData.title,\n      episode_id: filmData.episode_id,\n      opening_crawl: filmData.opening_crawl,\n      director: filmData.director,\n      producer: filmData.producer,\n      release_date: filmData.release_date,\n      characters: charactersData,\n      planets: planetsData,\n      species: speciesData,\n      starships: starshipsData,\n      vehicles: vehiclesData,\n    };\n\n    dispatch(setFilmDetails(filmsDetailsData));\n    dispatch(setCharacters(charactersData));\n    dispatch(setCharacterNames(charactersData.map(character => character.name)));\n    dispatch(setPlanets(planetsData.map(planet => planet.name)));\n    dispatch(setStarships(starshipsData));\n    dispatch(setVehicles(vehiclesData));\n    dispatch(setSpecies(speciesData));\n  } catch (error) {\n    console.error('Error fetching film details:', error);\n    console.error('Response:', error.response);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}