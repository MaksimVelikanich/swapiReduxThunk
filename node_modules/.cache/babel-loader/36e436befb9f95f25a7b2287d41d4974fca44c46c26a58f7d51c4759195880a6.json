{"ast":null,"code":"// AboutFilmAction.js\nimport axios from 'axios';\n\n// інші типи, які вам можуть знадобитися\n\nexport const SET_FILM_DETAILS = 'SET_FILM_DETAILS';\nexport const SET_CHARACTERS = 'SET_CHARACTERS';\nexport const SET_CHARACTER_NAMES = 'SET_CHARACTER_NAMES';\nexport const SET_PLANETS = 'SET_PLANETS';\nexport const SET_STARSHIPS = 'SET_STARSHIPS';\nexport const SET_VEHICLES = 'SET_VEHICLES';\nexport const SET_SPECIES = 'SET_SPECIES';\nexport const setFilmDetails = filmDetails => ({\n  type: SET_FILM_DETAILS,\n  payload: filmDetails\n});\nexport const setCharacters = characters => ({\n  type: SET_CHARACTERS,\n  payload: characters\n});\nexport const setCharacterNames = characterNames => ({\n  type: SET_CHARACTER_NAMES,\n  payload: characterNames\n});\nexport const setPlanets = planets => ({\n  type: SET_PLANETS,\n  payload: planets\n});\nexport const setStarships = starships => ({\n  type: SET_STARSHIPS,\n  payload: starships\n});\nexport const setVehicles = vehicles => ({\n  type: SET_VEHICLES,\n  payload: vehicles\n});\nexport const setSpecies = species => ({\n  type: SET_SPECIES,\n  payload: species\n});\nexport const fetchFilmDetails = filmId => async dispatch => {\n  try {\n    const response = await axios.get(`https://swapi.dev/api/films/${filmId}`);\n    const filmData = response.data;\n    const characters = await Promise.all(filmData.characters.map(async characterUrl => {\n      const characterResponse = await axios.get(characterUrl);\n      const characterData = characterResponse.data;\n      return {\n        name: characterData.name\n      };\n    }));\n    const planets = await Promise.all(filmData.planets.map(async planetUrl => {\n      const planetResponse = await axios.get(planetUrl);\n      const planetData = planetResponse.data;\n      return {\n        name: planetData.name\n      };\n    }));\n    console.log();\n    dispatch(setFilmDetails(filmData));\n    dispatch(setCharacters(characters));\n    dispatch(setCharacterNames(characters.map(character => character.name)));\n    dispatch(setPlanets(characters.map(planets => planets.name)));\n    dispatch(setPlanets(filmData.planets));\n    dispatch(setStarships(filmData.starships));\n    dispatch(setVehicles(filmData.vehicles));\n    dispatch(setSpecies(filmData.species));\n  } catch (error) {\n    console.error('Error fetching film details:', error);\n    console.error('Response:', error.response);\n  }\n};","map":{"version":3,"names":["axios","SET_FILM_DETAILS","SET_CHARACTERS","SET_CHARACTER_NAMES","SET_PLANETS","SET_STARSHIPS","SET_VEHICLES","SET_SPECIES","setFilmDetails","filmDetails","type","payload","setCharacters","characters","setCharacterNames","characterNames","setPlanets","planets","setStarships","starships","setVehicles","vehicles","setSpecies","species","fetchFilmDetails","filmId","dispatch","response","get","filmData","data","Promise","all","map","characterUrl","characterResponse","characterData","name","planetUrl","planetResponse","planetData","console","log","character","error"],"sources":["/Users/a1/react/swapi/src/store/aboutFilmActions.js"],"sourcesContent":["// AboutFilmAction.js\nimport axios from 'axios';\n\n// інші типи, які вам можуть знадобитися\n\nexport const SET_FILM_DETAILS = 'SET_FILM_DETAILS';\nexport const SET_CHARACTERS = 'SET_CHARACTERS';\nexport const SET_CHARACTER_NAMES = 'SET_CHARACTER_NAMES';\nexport const SET_PLANETS = 'SET_PLANETS';\nexport const SET_STARSHIPS = 'SET_STARSHIPS';\nexport const SET_VEHICLES = 'SET_VEHICLES';\nexport const SET_SPECIES = 'SET_SPECIES';\n\nexport const setFilmDetails = (filmDetails) => ({\n  type: SET_FILM_DETAILS,\n  payload: filmDetails,\n});\n\nexport const setCharacters = (characters) => ({\n  type: SET_CHARACTERS,\n  payload: characters,\n});\n\nexport const setCharacterNames = (characterNames) => ({\n  type: SET_CHARACTER_NAMES,\n  payload: characterNames,\n});\n\nexport const setPlanets = (planets) => ({\n  type: SET_PLANETS,\n  payload: planets,\n});\n\nexport const setStarships = (starships) => ({\n  type: SET_STARSHIPS,\n  payload: starships,\n});\n\nexport const setVehicles = (vehicles) => ({\n  type: SET_VEHICLES,\n  payload: vehicles,\n});\n\nexport const setSpecies = (species) => ({\n  type: SET_SPECIES,\n  payload: species,\n});\n\nexport const fetchFilmDetails = (filmId) => async (dispatch) => {\n  try {\n    const response = await axios.get(`https://swapi.dev/api/films/${filmId}`);\n    const filmData = response.data;\n\n    const characters = await Promise.all(\n      filmData.characters.map(async (characterUrl) => {\n        const characterResponse = await axios.get(characterUrl);\n        const characterData = characterResponse.data;\n        return { name: characterData.name, };\n      })\n    );\n\n    const planets = await Promise.all(\n      filmData.planets.map(async (planetUrl) => {\n        const planetResponse = await axios.get(planetUrl);\n        const planetData = planetResponse.data;\n        return { name: planetData.name, };\n      })\n    );\n\n    console.log()\n\n    dispatch(setFilmDetails(filmData));\n    dispatch(setCharacters(characters));\n    dispatch(setCharacterNames(characters.map(character => character.name)));\n    dispatch(setPlanets(characters.map(planets => planets.name)));\n    dispatch(setPlanets(filmData.planets));\n    dispatch(setStarships(filmData.starships));\n    dispatch(setVehicles(filmData.vehicles));\n    dispatch(setSpecies(filmData.species));\n  } catch (error) {\n    console.error('Error fetching film details:', error);\n    console.error('Response:', error.response);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}