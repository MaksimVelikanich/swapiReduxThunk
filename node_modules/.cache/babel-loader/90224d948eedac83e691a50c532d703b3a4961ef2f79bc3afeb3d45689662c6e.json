{"ast":null,"code":"// aboutFilmActions.js\nimport { setFilmDetails } from './aboutFilmReducer';\nimport { useEffect } from 'react';\n\n// Видаліть експорт setLoading, бо він вже імпортується вище\nimport { setLoading } from './aboutFilmReducer';\nconst fetchFilmDetails = (id, dispatch) => {\n  // Видаліть async (dispatch) і useEffect\n  const fetchData = async () => {\n    try {\n      dispatch(setLoading(true));\n      const response = await fetch(`https://swapi.dev/api/films/${id}/`);\n      if (!response.ok) {\n        throw new Error(`Error fetching film details: ${response.statusText}`);\n      }\n      const filmData = await response.json();\n      const charactersData = await Promise.all(filmData.characters.map(async url => {\n        const characterResponse = await fetch(url);\n        return characterResponse.json();\n      }));\n      const planetsData = await Promise.all(filmData.planets.map(async url => {\n        const planetResponse = await fetch(url);\n        return planetResponse.json();\n      }));\n      const starshipsData = await Promise.all(filmData.starships.map(async url => {\n        const starshipResponse = await fetch(url);\n        return starshipResponse.json();\n      }));\n      const vehiclesData = await Promise.all(filmData.vehicles.map(async url => {\n        const vehicleResponse = await fetch(url);\n        return vehicleResponse.json();\n      }));\n      const speciesData = await Promise.all(filmData.species.map(async url => {\n        const speciesResponse = await fetch(url);\n        return speciesResponse.json();\n      }));\n      dispatch(setFilmDetails({\n        film: filmData,\n        characters: charactersData,\n        planets: planetsData,\n        starships: starshipsData,\n        vehicles: vehiclesData,\n        species: speciesData\n      }));\n      dispatch(setLoading(false));\n    } catch (error) {\n      console.error('Error fetching film details:', error);\n      dispatch(setLoading(false));\n    }\n  };\n  fetchData();\n};\nexport default fetchFilmDetails;","map":{"version":3,"names":["setFilmDetails","useEffect","setLoading","fetchFilmDetails","id","dispatch","fetchData","response","fetch","ok","Error","statusText","filmData","json","charactersData","Promise","all","characters","map","url","characterResponse","planetsData","planets","planetResponse","starshipsData","starships","starshipResponse","vehiclesData","vehicles","vehicleResponse","speciesData","species","speciesResponse","film","error","console"],"sources":["/Users/a1/react/swapi/src/store/aboutFilmActions.js"],"sourcesContent":["// aboutFilmActions.js\nimport { setFilmDetails } from './aboutFilmReducer';\nimport { useEffect } from 'react';\n\n// Видаліть експорт setLoading, бо він вже імпортується вище\n import { setLoading } from './aboutFilmReducer';\n\nconst fetchFilmDetails = (id, dispatch) => { // Видаліть async (dispatch) і useEffect\n  const fetchData = async () => {\n    try {\n      dispatch(setLoading(true));\n\n      const response = await fetch(`https://swapi.dev/api/films/${id}/`);\n\n      if (!response.ok) {\n        throw new Error(`Error fetching film details: ${response.statusText}`);\n      }\n\n      const filmData = await response.json();\n\n      const charactersData = await Promise.all(\n        filmData.characters.map(async (url) => {\n          const characterResponse = await fetch(url);\n          return characterResponse.json();\n        })\n      );\n\n      const planetsData = await Promise.all(\n        filmData.planets.map(async (url) => {\n          const planetResponse = await fetch(url);\n          return planetResponse.json();\n        })\n      );\n\n      const starshipsData = await Promise.all(\n        filmData.starships.map(async (url) => {\n          const starshipResponse = await fetch(url);\n          return starshipResponse.json();\n        })\n      );\n\n      const vehiclesData = await Promise.all(\n        filmData.vehicles.map(async (url) => {\n          const vehicleResponse = await fetch(url);\n          return vehicleResponse.json();\n        })\n      );\n\n      const speciesData = await Promise.all(\n        filmData.species.map(async (url) => {\n          const speciesResponse = await fetch(url);\n          return speciesResponse.json();\n        })\n      );\n\n      dispatch(\n        setFilmDetails({\n          film: filmData,\n          characters: charactersData,\n          planets: planetsData,\n          starships: starshipsData,\n          vehicles: vehiclesData,\n          species: speciesData,\n        })\n      );\n      dispatch(setLoading(false));\n\n    } catch (error) {\n      console.error('Error fetching film details:', error);\n      dispatch(setLoading(false));\n    }\n  };\n\n  fetchData();\n};\n\nexport default fetchFilmDetails;\n"],"mappings":"AAAA;AACA,SAASA,cAAc,QAAQ,oBAAoB;AACnD,SAASC,SAAS,QAAQ,OAAO;;AAEjC;AACC,SAASC,UAAU,QAAQ,oBAAoB;AAEhD,MAAMC,gBAAgB,GAAGA,CAACC,EAAE,EAAEC,QAAQ,KAAK;EAAE;EAC3C,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACFD,QAAQ,CAACH,UAAU,CAAC,IAAI,CAAC,CAAC;MAE1B,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAE,+BAA8BJ,EAAG,GAAE,CAAC;MAElE,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,gCAA+BH,QAAQ,CAACI,UAAW,EAAC,CAAC;MACxE;MAEA,MAAMC,QAAQ,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAEtC,MAAMC,cAAc,GAAG,MAAMC,OAAO,CAACC,GAAG,CACtCJ,QAAQ,CAACK,UAAU,CAACC,GAAG,CAAC,MAAOC,GAAG,IAAK;QACrC,MAAMC,iBAAiB,GAAG,MAAMZ,KAAK,CAACW,GAAG,CAAC;QAC1C,OAAOC,iBAAiB,CAACP,IAAI,CAAC,CAAC;MACjC,CAAC,CACH,CAAC;MAED,MAAMQ,WAAW,GAAG,MAAMN,OAAO,CAACC,GAAG,CACnCJ,QAAQ,CAACU,OAAO,CAACJ,GAAG,CAAC,MAAOC,GAAG,IAAK;QAClC,MAAMI,cAAc,GAAG,MAAMf,KAAK,CAACW,GAAG,CAAC;QACvC,OAAOI,cAAc,CAACV,IAAI,CAAC,CAAC;MAC9B,CAAC,CACH,CAAC;MAED,MAAMW,aAAa,GAAG,MAAMT,OAAO,CAACC,GAAG,CACrCJ,QAAQ,CAACa,SAAS,CAACP,GAAG,CAAC,MAAOC,GAAG,IAAK;QACpC,MAAMO,gBAAgB,GAAG,MAAMlB,KAAK,CAACW,GAAG,CAAC;QACzC,OAAOO,gBAAgB,CAACb,IAAI,CAAC,CAAC;MAChC,CAAC,CACH,CAAC;MAED,MAAMc,YAAY,GAAG,MAAMZ,OAAO,CAACC,GAAG,CACpCJ,QAAQ,CAACgB,QAAQ,CAACV,GAAG,CAAC,MAAOC,GAAG,IAAK;QACnC,MAAMU,eAAe,GAAG,MAAMrB,KAAK,CAACW,GAAG,CAAC;QACxC,OAAOU,eAAe,CAAChB,IAAI,CAAC,CAAC;MAC/B,CAAC,CACH,CAAC;MAED,MAAMiB,WAAW,GAAG,MAAMf,OAAO,CAACC,GAAG,CACnCJ,QAAQ,CAACmB,OAAO,CAACb,GAAG,CAAC,MAAOC,GAAG,IAAK;QAClC,MAAMa,eAAe,GAAG,MAAMxB,KAAK,CAACW,GAAG,CAAC;QACxC,OAAOa,eAAe,CAACnB,IAAI,CAAC,CAAC;MAC/B,CAAC,CACH,CAAC;MAEDR,QAAQ,CACNL,cAAc,CAAC;QACbiC,IAAI,EAAErB,QAAQ;QACdK,UAAU,EAAEH,cAAc;QAC1BQ,OAAO,EAAED,WAAW;QACpBI,SAAS,EAAED,aAAa;QACxBI,QAAQ,EAAED,YAAY;QACtBI,OAAO,EAAED;MACX,CAAC,CACH,CAAC;MACDzB,QAAQ,CAACH,UAAU,CAAC,KAAK,CAAC,CAAC;IAE7B,CAAC,CAAC,OAAOgC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD7B,QAAQ,CAACH,UAAU,CAAC,KAAK,CAAC,CAAC;IAC7B;EACF,CAAC;EAEDI,SAAS,CAAC,CAAC;AACb,CAAC;AAED,eAAeH,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}