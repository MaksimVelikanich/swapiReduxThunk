{"ast":null,"code":"import axios from 'axios';\n\n// Дії для обробки деталей фільму\nexport const FETCH_FILM_DETAILS_START = 'FETCH_FILM_DETAILS_START';\nexport const FETCH_FILM_DETAILS_SUCCESS = 'FETCH_FILM_DETAILS_SUCCESS';\nexport const FETCH_FILM_DETAILS_ERROR = 'FETCH_FILM_DETAILS_ERROR';\nexport const SET_LOADING = 'SET_LOADING';\nexport const setLoading = loading => {\n  console.log('Setting loading state:', loading);\n  return {\n    type: SET_LOADING,\n    payload: loading\n  };\n};\nexport const fetchFilmDetailsStart = filmId => {\n  console.log('Fetching film details start:', filmId);\n  return {\n    type: FETCH_FILM_DETAILS_START,\n    payload: filmId\n  };\n};\nexport const fetchFilmDetailsSuccess = filmDetails => {\n  console.log('Fetching film details successful:', filmDetails);\n  return {\n    type: FETCH_FILM_DETAILS_SUCCESS,\n    payload: filmDetails\n  };\n};\nexport const fetchFilmDetailsError = error => {\n  console.log('Fetching film details error:', error);\n  return {\n    type: FETCH_FILM_DETAILS_ERROR,\n    payload: error\n  };\n};\nexport const fetchFilmDetails = filmId => async dispatch => {\n  try {\n    dispatch(fetchFilmDetailsStart(filmId));\n    dispatch(setLoading(true));\n    const response = await axios.get(`https://swapi.dev/api/films/${filmId}/`);\n    const filmData = response.data;\n    const charactersData = await Promise.all(filmData.characters.map(url => axios.get(url).then(res => res.data)));\n    const planetsData = await Promise.all(filmData.planets.map(url => axios.get(url).then(res => res.data)));\n    const starshipsData = await Promise.all(filmData.starships.map(url => axios.get(url).then(res => res.data)));\n    const vehiclesData = await Promise.all(filmData.vehicles.map(url => axios.get(url).then(res => res.data)));\n    const speciesData = await Promise.all(filmData.species.map(url => axios.get(url).then(res => res.data)));\n    const filmDetails = {\n      film: filmData,\n      characters: charactersData,\n      planets: planetsData,\n      starships: starshipsData,\n      vehicles: vehiclesData,\n      species: speciesData\n    };\n    dispatch(fetchFilmDetailsSuccess(filmDetails));\n    dispatch(setLoading(false));\n  } catch (error) {\n    dispatch(fetchFilmDetailsError(error.message));\n    dispatch(setLoading(false));\n  }\n};","map":{"version":3,"names":["axios","FETCH_FILM_DETAILS_START","FETCH_FILM_DETAILS_SUCCESS","FETCH_FILM_DETAILS_ERROR","SET_LOADING","setLoading","loading","console","log","type","payload","fetchFilmDetailsStart","filmId","fetchFilmDetailsSuccess","filmDetails","fetchFilmDetailsError","error","fetchFilmDetails","dispatch","response","get","filmData","data","charactersData","Promise","all","characters","map","url","then","res","planetsData","planets","starshipsData","starships","vehiclesData","vehicles","speciesData","species","film","message"],"sources":["/Users/a1/react/swapi/src/store/aboutFilmActions.js"],"sourcesContent":["import axios from 'axios';\n\n// Дії для обробки деталей фільму\nexport const FETCH_FILM_DETAILS_START = 'FETCH_FILM_DETAILS_START';\nexport const FETCH_FILM_DETAILS_SUCCESS = 'FETCH_FILM_DETAILS_SUCCESS';\nexport const FETCH_FILM_DETAILS_ERROR = 'FETCH_FILM_DETAILS_ERROR';\nexport const SET_LOADING = 'SET_LOADING';\n\nexport const setLoading = (loading) => {\n  console.log('Setting loading state:', loading);\n  return {\n    type: SET_LOADING,\n    payload: loading,\n  };\n};\n\nexport const fetchFilmDetailsStart = (filmId) => {\n  console.log('Fetching film details start:', filmId);\n  return {\n    type: FETCH_FILM_DETAILS_START,\n    payload: filmId,\n  };\n};\n\nexport const fetchFilmDetailsSuccess = (filmDetails) => {\n  console.log('Fetching film details successful:', filmDetails);\n  return {\n    type: FETCH_FILM_DETAILS_SUCCESS,\n    payload: filmDetails,\n  };\n};\n\nexport const fetchFilmDetailsError = (error) => {\n  console.log('Fetching film details error:', error);\n  return {\n    type: FETCH_FILM_DETAILS_ERROR,\n    payload: error,\n  };\n};\n\nexport const fetchFilmDetails = (filmId) => async (dispatch) => {\n  try {\n    dispatch(fetchFilmDetailsStart(filmId));\n    dispatch(setLoading(true));\n\n    const response = await axios.get(`https://swapi.dev/api/films/${filmId}/`);\n    const filmData = response.data;\n\n    const charactersData = await Promise.all(filmData.characters.map(url => axios.get(url).then(res => res.data)));\n    const planetsData = await Promise.all(filmData.planets.map(url => axios.get(url).then(res => res.data)));\n    const starshipsData = await Promise.all(filmData.starships.map(url => axios.get(url).then(res => res.data)));\n    const vehiclesData = await Promise.all(filmData.vehicles.map(url => axios.get(url).then(res => res.data)));\n    const speciesData = await Promise.all(filmData.species.map(url => axios.get(url).then(res => res.data)));\n\n    const filmDetails = {\n      film: filmData,\n      characters: charactersData,\n      planets: planetsData,\n      starships: starshipsData,\n      vehicles: vehiclesData,\n      species: speciesData,\n    };\n\n    dispatch(fetchFilmDetailsSuccess(filmDetails));\n    dispatch(setLoading(false));\n  } catch (error) {\n    dispatch(fetchFilmDetailsError(error.message));\n    dispatch(setLoading(false));\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}