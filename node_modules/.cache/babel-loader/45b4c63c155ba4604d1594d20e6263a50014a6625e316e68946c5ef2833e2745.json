{"ast":null,"code":"import { setFilmDetails } from './aboutFilmReducer';\nexport const fetchFilmDetails = id => {\n  var _s = $RefreshSig$();\n  return _s(async dispatch => {\n    _s();\n    try {\n      const response = await fetch(`https://swapi.dev/api/films/${id}/`);\n      const filmData = await response.json();\n      const episode_id = filmFromLocation ? filmFromLocation.url : null;\n      const filmIdFromUrl = episode_id ? episode_id.split('/').slice(-2, -1)[0] : null;\n      const {\n        id\n      } = useParams();\n      const charactersData = await Promise.all(filmData.characters.map(async url => {\n        const characterResponse = await fetch(url);\n        return characterResponse.json();\n      }));\n      const planetsData = await Promise.all(filmData.planets.map(async url => {\n        const planetResponse = await fetch(url);\n        return planetResponse.json();\n      }));\n      const starshipsData = await Promise.all(filmData.starships.map(async url => {\n        const starshipResponse = await fetch(url);\n        return starshipResponse.json();\n      }));\n      const vehiclesData = await Promise.all(filmData.vehicles.map(async url => {\n        const vehicleResponse = await fetch(url);\n        return vehicleResponse.json();\n      }));\n      const speciesData = await Promise.all(filmData.species.map(async url => {\n        const speciesResponse = await fetch(url);\n        return speciesResponse.json();\n      }));\n      dispatch(setFilmDetails({\n        film: filmData,\n        characters: charactersData,\n        planets: planetsData,\n        starships: starshipsData,\n        vehicles: vehiclesData,\n        species: speciesData\n      }));\n    } catch (error) {\n      console.error('Error fetching film details:', error);\n    }\n  }, \"yQgCIz/jJfqV1l9s2yoba81MT5A=\", true);\n};","map":{"version":3,"names":["setFilmDetails","fetchFilmDetails","id","_s","$RefreshSig$","dispatch","response","fetch","filmData","json","episode_id","filmFromLocation","url","filmIdFromUrl","split","slice","useParams","charactersData","Promise","all","characters","map","characterResponse","planetsData","planets","planetResponse","starshipsData","starships","starshipResponse","vehiclesData","vehicles","vehicleResponse","speciesData","species","speciesResponse","film","error","console"],"sources":["/Users/a1/react/swapi/src/store/aboutFilmActions.js"],"sourcesContent":["import { setFilmDetails } from './aboutFilmReducer';\n\nexport const fetchFilmDetails = (id) => async (dispatch) => {\n  try {\n    const response = await fetch(`https://swapi.dev/api/films/${id}/`);\n    const filmData = await response.json();\n\n    const episode_id = filmFromLocation ? filmFromLocation.url : null;\n  const filmIdFromUrl = episode_id ? episode_id.split('/').slice(-2, -1)[0] : null;\n  const { id } = useParams();\n\n    const charactersData = await Promise.all(filmData.characters.map(async (url) => {\n      const characterResponse = await fetch(url);\n      return characterResponse.json();\n    }));\n\n    const planetsData = await Promise.all(filmData.planets.map(async (url) => {\n      const planetResponse = await fetch(url);\n      return planetResponse.json();\n    }));\n\n    const starshipsData = await Promise.all(filmData.starships.map(async (url) => {\n      const starshipResponse = await fetch(url);\n      return starshipResponse.json();\n    }));\n\n    const vehiclesData = await Promise.all(filmData.vehicles.map(async (url) => {\n      const vehicleResponse = await fetch(url);\n      return vehicleResponse.json();\n    }));\n\n    const speciesData = await Promise.all(filmData.species.map(async (url) => {\n      const speciesResponse = await fetch(url);\n      return speciesResponse.json();\n    }));\n\n    dispatch(setFilmDetails({\n      film: filmData,\n      characters: charactersData,\n      planets: planetsData,\n      starships: starshipsData,\n      vehicles: vehiclesData,\n      species: speciesData,\n    }));\n  } catch (error) {\n    console.error('Error fetching film details:', error);\n  }\n};\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,oBAAoB;AAEnD,OAAO,MAAMC,gBAAgB,GAAIC,EAAE;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAAA,OAAAD,EAAA,CAAK,MAAOE,QAAQ,IAAK;IAAAF,EAAA;IAC1D,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,+BAA8BL,EAAG,GAAE,CAAC;MAClE,MAAMM,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAEtC,MAAMC,UAAU,GAAGC,gBAAgB,GAAGA,gBAAgB,CAACC,GAAG,GAAG,IAAI;MACnE,MAAMC,aAAa,GAAGH,UAAU,GAAGA,UAAU,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;MAChF,MAAM;QAAEb;MAAG,CAAC,GAAGc,SAAS,CAAC,CAAC;MAExB,MAAMC,cAAc,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACX,QAAQ,CAACY,UAAU,CAACC,GAAG,CAAC,MAAOT,GAAG,IAAK;QAC9E,MAAMU,iBAAiB,GAAG,MAAMf,KAAK,CAACK,GAAG,CAAC;QAC1C,OAAOU,iBAAiB,CAACb,IAAI,CAAC,CAAC;MACjC,CAAC,CAAC,CAAC;MAEH,MAAMc,WAAW,GAAG,MAAML,OAAO,CAACC,GAAG,CAACX,QAAQ,CAACgB,OAAO,CAACH,GAAG,CAAC,MAAOT,GAAG,IAAK;QACxE,MAAMa,cAAc,GAAG,MAAMlB,KAAK,CAACK,GAAG,CAAC;QACvC,OAAOa,cAAc,CAAChB,IAAI,CAAC,CAAC;MAC9B,CAAC,CAAC,CAAC;MAEH,MAAMiB,aAAa,GAAG,MAAMR,OAAO,CAACC,GAAG,CAACX,QAAQ,CAACmB,SAAS,CAACN,GAAG,CAAC,MAAOT,GAAG,IAAK;QAC5E,MAAMgB,gBAAgB,GAAG,MAAMrB,KAAK,CAACK,GAAG,CAAC;QACzC,OAAOgB,gBAAgB,CAACnB,IAAI,CAAC,CAAC;MAChC,CAAC,CAAC,CAAC;MAEH,MAAMoB,YAAY,GAAG,MAAMX,OAAO,CAACC,GAAG,CAACX,QAAQ,CAACsB,QAAQ,CAACT,GAAG,CAAC,MAAOT,GAAG,IAAK;QAC1E,MAAMmB,eAAe,GAAG,MAAMxB,KAAK,CAACK,GAAG,CAAC;QACxC,OAAOmB,eAAe,CAACtB,IAAI,CAAC,CAAC;MAC/B,CAAC,CAAC,CAAC;MAEH,MAAMuB,WAAW,GAAG,MAAMd,OAAO,CAACC,GAAG,CAACX,QAAQ,CAACyB,OAAO,CAACZ,GAAG,CAAC,MAAOT,GAAG,IAAK;QACxE,MAAMsB,eAAe,GAAG,MAAM3B,KAAK,CAACK,GAAG,CAAC;QACxC,OAAOsB,eAAe,CAACzB,IAAI,CAAC,CAAC;MAC/B,CAAC,CAAC,CAAC;MAEHJ,QAAQ,CAACL,cAAc,CAAC;QACtBmC,IAAI,EAAE3B,QAAQ;QACdY,UAAU,EAAEH,cAAc;QAC1BO,OAAO,EAAED,WAAW;QACpBI,SAAS,EAAED,aAAa;QACxBI,QAAQ,EAAED,YAAY;QACtBI,OAAO,EAAED;MACX,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}