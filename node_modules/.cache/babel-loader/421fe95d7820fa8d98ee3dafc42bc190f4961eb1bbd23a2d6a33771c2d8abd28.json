{"ast":null,"code":"var _jsxFileName = \"/Users/a1/react/swapi/src/components/AboutFilm.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport star from '../img/star.jpeg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AboutFilm() {\n  _s();\n  var _location$state, _location$state2;\n  const location = useLocation();\n  const film = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.film;\n  const filmIndex = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.filmIndex;\n  const [characters, setCharacters] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [starships, setStarships] = useState([]);\n  const [vehicles, setVehicles] = useState([]);\n  useEffect(() => {\n    if (film) {\n      const fetchCharacters = async () => {\n        const promises = film.characters.map(url => fetch(url).then(res => res.json()));\n        const characters = await Promise.all(promises);\n        setCharacters(characters);\n      };\n      fetchCharacters();\n    }\n  }, [film]);\n  useEffect(() => {\n    if (film) {\n      const fetchPlanets = async () => {\n        const promises = film.planets.map(url => fetch(url).then(res => res.json()));\n        const planets = await Promise.all(promises);\n        setPlanets(planets);\n      };\n      fetchPlanets();\n    }\n  }, [film]);\n  useEffect(() => {\n    if (film) {\n      const fetchStarships = async () => {\n        const promises = film.starships.map(url => fetch(url).then(res => res.json()));\n        const starships = await Promise.all(promises);\n        setStarships(starships);\n      };\n      fetchStarships();\n    }\n  }, [film]);\n  useEffect(() => {\n    if (film) {\n      const fetchVehicles = async () => {\n        const promises = film.vehicles.map(url => fetch(url).then(res => res.json()));\n        const vehicles = await Promise.all(promises);\n        setVehicles(vehicles);\n      };\n      fetchVehicles();\n    }\n  }, [film]);\n  console.log(characters);\n  if (!film) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"block\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: star,\n      alt: \"star\",\n      className: \"backStar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filmInfo\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Film Index: \", filmIndex]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Title: \", film.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"opening_crawl: \", film.opening_crawl]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Director: \", film.director]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Release Date: \", film.release_date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"planets\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"Planets\",\n          children: \"Planets:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), planets.map((planet, filmIndex) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: planet.name\n        }, filmIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"starships\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"Starships\",\n          children: \"Starships:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), starships.map((starship, filmIndex) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: starship.name\n        }, filmIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"vehicles\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"Vehicles\",\n          children: \"Vehicles:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), vehicles.map((vehicle, filmIndex) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: vehicle.name\n        }, filmIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hero\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"Hero\",\n          children: \"Characters:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), characters.map((character, filmIndex) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: character.name\n        }, filmIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(AboutFilm, \"MT2CgLlsQwSbwTfRd+CYlBMsMpQ=\", false, function () {\n  return [useLocation];\n});\n_c = AboutFilm;\nexport default AboutFilm;\nvar _c;\n$RefreshReg$(_c, \"AboutFilm\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","star","jsxDEV","_jsxDEV","AboutFilm","_s","_location$state","_location$state2","location","film","state","filmIndex","characters","setCharacters","planets","setPlanets","starships","setStarships","vehicles","setVehicles","fetchCharacters","promises","map","url","fetch","then","res","json","Promise","all","fetchPlanets","fetchStarships","fetchVehicles","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","className","src","alt","title","opening_crawl","director","release_date","id","planet","name","starship","vehicle","character","_c","$RefreshReg$"],"sources":["/Users/a1/react/swapi/src/components/AboutFilm.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport star from '../img/star.jpeg';\n\nfunction AboutFilm() {\n  const location = useLocation();\n  const film = location.state?.film;\n  const filmIndex = location.state?.filmIndex;\n\n\n  const [characters, setCharacters] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [starships, setStarships] = useState([]);\n  const [vehicles, setVehicles] = useState([]);\n  \n\n  useEffect(() => {\n    if (film) {\n      const fetchCharacters = async () => {\n        const promises = film.characters.map((url) => fetch(url).then((res) => res.json()));\n        const characters = await Promise.all(promises);\n        setCharacters(characters);\n      };\n      fetchCharacters();\n    }\n  }, [film]);\n\n  useEffect(() => {\n    if (film) {\n      const fetchPlanets = async () => {\n        const promises = film.planets.map((url) => fetch(url).then((res) => res.json()));\n        const planets = await Promise.all(promises);\n        setPlanets(planets);\n      };\n      fetchPlanets();\n    }\n  }, [film]);\n\n  useEffect(() => {\n    if (film) {\n      const fetchStarships = async () => {\n        const promises = film.starships.map((url) => fetch(url).then((res) => res.json()));\n        const starships = await Promise.all(promises);\n        setStarships(starships);\n      };\n      fetchStarships();\n    }\n  }, [film]);\n\n  useEffect(() => {\n    if (film) {\n      const fetchVehicles = async () => {\n        const promises = film.vehicles.map((url) => fetch(url).then((res) => res.json()));\n        const vehicles = await Promise.all(promises);\n        setVehicles(vehicles);\n      };\n      fetchVehicles();\n    }\n  }, [film]);\n\n  \n\n  console.log(characters);\n  if (!film) {\n    return <p>No data available</p>;\n  }\n\n  return (\n    <div className='block'>\n      <img src={star} alt='star' className='backStar' />\n      <div className='filmInfo'>\n        <p>Film Index: {filmIndex}</p>\n        <p>Title: {film.title}</p>\n        <p>opening_crawl: {film.opening_crawl}</p>\n        <p>Director: {film.director}</p>\n        <p>Release Date: {film.release_date}</p>\n\n        <div className='planets'>\n          <p id = \"Planets\">Planets:</p>\n          {planets.map((planet, filmIndex) => (\n            <p key={filmIndex}>{planet.name}</p>\n          ))}\n        </div>\n\n        <div className=\"starships\">\n          <p id = \"Starships\">Starships:</p>\n          {starships.map((starship, filmIndex) => (\n            <p key={filmIndex}>{starship.name}</p>\n          ))}\n        </div>\n\n        <div className=\"vehicles\">\n          <p id = \"Vehicles\">Vehicles:</p>\n          {vehicles.map((vehicle, filmIndex) => (\n            <p key={filmIndex}>{vehicle.name}</p>\n          ))}\n        </div>\n\n\n        <div className=\"hero\">\n          <p id = \"Hero\">Characters:</p>\n          {characters.map((character, filmIndex) => (\n            <p key={filmIndex}>{character.name}</p>\n          ))}\n        </div>\n\n        \n\n\n      </div>\n    </div>\n  );\n}\n\nexport default AboutFilm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}