{"ast":null,"code":"// aboutFilmActions.js\nimport { setFilmDetails } from './aboutFilmReducer';\nimport React, { useEffect } from 'react';\nimport { setLoading } from './aboutFilmReducer';\nconst fetchFilmDetails = id => {\n  var _s = $RefreshSig$();\n  return _s(async dispatch => {\n    _s();\n    useEffect(() => {\n      const fetchData = async () => {\n        try {\n          dispatch(setLoading(true));\n          const response = await fetch(`https://swapi.dev/api/films/${id}/`);\n          if (!response.ok) {\n            throw new Error(`Error fetching film details: ${response.statusText}`);\n          }\n          const filmData = await response.json();\n          const charactersData = await Promise.all(filmData.characters.map(async url => {\n            const characterResponse = await fetch(url);\n            return characterResponse.json();\n          }));\n          const planetsData = await Promise.all(filmData.planets.map(async url => {\n            const planetResponse = await fetch(url);\n            return planetResponse.json();\n          }));\n          const starshipsData = await Promise.all(filmData.starships.map(async url => {\n            const starshipResponse = await fetch(url);\n            return starshipResponse.json();\n          }));\n          const vehiclesData = await Promise.all(filmData.vehicles.map(async url => {\n            const vehicleResponse = await fetch(url);\n            return vehicleResponse.json();\n          }));\n          const speciesData = await Promise.all(filmData.species.map(async url => {\n            const speciesResponse = await fetch(url);\n            return speciesResponse.json();\n          }));\n          dispatch(setFilmDetails({\n            film: filmData,\n            characters: charactersData,\n            planets: planetsData,\n            starships: starshipsData,\n            vehicles: vehiclesData,\n            species: speciesData\n          }));\n          dispatch(setLoading(false));\n        } catch (error) {\n          console.error('Error fetching film details:', error);\n          dispatch(setLoading(false));\n        }\n      };\n      fetchData();\n    }, [dispatch, id]);\n    return null; // або виведення JSX вашого компонента\n  }, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n};\nexport default fetchFilmDetails;","map":{"version":3,"names":["setFilmDetails","React","useEffect","setLoading","fetchFilmDetails","id","_s","$RefreshSig$","dispatch","fetchData","response","fetch","ok","Error","statusText","filmData","json","charactersData","Promise","all","characters","map","url","characterResponse","planetsData","planets","planetResponse","starshipsData","starships","starshipResponse","vehiclesData","vehicles","vehicleResponse","speciesData","species","speciesResponse","film","error","console"],"sources":["/Users/a1/react/swapi/src/store/aboutFilmActions.js"],"sourcesContent":["// aboutFilmActions.js\nimport { setFilmDetails } from './aboutFilmReducer';\nimport React, { useEffect } from 'react';\nimport { setLoading } from './aboutFilmReducer';\n\n\nconst fetchFilmDetails = (id) => async (dispatch) => {\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        dispatch(setLoading(true));\n\n        const response = await fetch(`https://swapi.dev/api/films/${id}/`);\n\n        if (!response.ok) {\n          throw new Error(`Error fetching film details: ${response.statusText}`);\n        }\n\n        const filmData = await response.json();\n\n        const charactersData = await Promise.all(\n          filmData.characters.map(async (url) => {\n            const characterResponse = await fetch(url);\n            return characterResponse.json();\n          })\n        );\n\n        const planetsData = await Promise.all(\n          filmData.planets.map(async (url) => {\n            const planetResponse = await fetch(url);\n            return planetResponse.json();\n          })\n        );\n\n        const starshipsData = await Promise.all(\n          filmData.starships.map(async (url) => {\n            const starshipResponse = await fetch(url);\n            return starshipResponse.json();\n          })\n        );\n\n        const vehiclesData = await Promise.all(\n          filmData.vehicles.map(async (url) => {\n            const vehicleResponse = await fetch(url);\n            return vehicleResponse.json();\n          })\n        );\n\n        const speciesData = await Promise.all(\n          filmData.species.map(async (url) => {\n            const speciesResponse = await fetch(url);\n            return speciesResponse.json();\n          })\n        );\n\n        dispatch(\n          setFilmDetails({\n            film: filmData,\n            characters: charactersData,\n            planets: planetsData,\n            starships: starshipsData,\n            vehicles: vehiclesData,\n            species: speciesData,\n          })\n        );\n        dispatch(setLoading(false));\n\n      } catch (error) {\n        console.error('Error fetching film details:', error);\n        dispatch(setLoading(false));\n      }\n    };\n\n    fetchData();\n  }, [dispatch, id]);\n\n  return null; // або виведення JSX вашого компонента\n};\n\n\nexport default fetchFilmDetails;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}