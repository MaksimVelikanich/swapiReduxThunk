{"ast":null,"code":"// AboutFilmAction.js\nimport axios from 'axios';\n\n// інші типи, які вам можуть знадобитися\n\nexport const SET_FILM_DETAILS = 'SET_FILM_DETAILS';\nexport const SET_CHARACTERS = 'SET_CHARACTERS';\nexport const SET_CHARACTER_NAMES = 'SET_CHARACTER_NAMES';\nexport const SET_PLANETS = 'SET_PLANETS';\nexport const SET_STARSHIPS = 'SET_STARSHIPS';\nexport const SET_VEHICLES = 'SET_VEHICLES';\nexport const SET_SPECIES = 'SET_SPECIES';\nexport const setFilmDetails = filmDetails => ({\n  type: SET_FILM_DETAILS,\n  payload: filmDetails\n});\nexport const setCharacters = characters => ({\n  type: SET_CHARACTERS,\n  payload: characters\n});\nexport const setCharacterNames = characterNames => ({\n  type: SET_CHARACTER_NAMES,\n  payload: characterNames\n});\nexport const setPlanets = planets => ({\n  type: SET_PLANETS,\n  payload: planets\n});\nexport const setStarships = starships => ({\n  type: SET_STARSHIPS,\n  payload: starships\n});\nexport const setVehicles = vehicles => ({\n  type: SET_VEHICLES,\n  payload: vehicles\n});\nexport const setSpecies = species => ({\n  type: SET_SPECIES,\n  payload: species\n});\nexport const fetchFilmDetails = filmId => async dispatch => {\n  try {\n    const response = await axios.get(`https://swapi.dev/api/films/${filmId}`);\n    const filmData = response.data;\n    const setFilmDetails = await Promise.all(filmData.films.map(async filmUrl => {\n      const filmResponse = await axios.get(filmUrl);\n      const filmData = filmResponse.data;\n      return {\n        title: filmData.title,\n        url: filmUrl\n      };\n    }));\n    const charactersData = await Promise.all(filmData.characters.map(async characterUrl => {\n      const characterResponse = await axios.get(characterUrl);\n      const characterData = characterResponse.data;\n      return {\n        name: characterData.name,\n        url: characterUrl\n      };\n    }));\n    const planetsData = await Promise.all(filmData.planets.map(async planetUrl => {\n      const planetResponse = await axios.get(planetUrl);\n      return planetResponse.data;\n    }));\n    const starshipsData = await Promise.all(filmData.starships.map(async starshipUrl => {\n      const starshipResponse = await axios.get(starshipUrl);\n      return starshipResponse.data;\n    }));\n    const vehiclesData = await Promise.all(filmData.vehicles.map(async vehicleUrl => {\n      const vehicleResponse = await axios.get(vehicleUrl);\n      return vehicleResponse.data;\n    }));\n    const speciesData = await Promise.all(filmData.species.map(async specieUrl => {\n      const specieResponse = await axios.get(specieUrl);\n      return specieResponse.data;\n    }));\n    dispatch(setFilmDetails(filmData));\n    dispatch(setCharacters(charactersData));\n    dispatch(setCharacterNames(charactersData.map(character => character.name)));\n    dispatch(setPlanets(planetsData.map(planet => planet.name)));\n    dispatch(setStarships(starshipsData.map(starship => starship.name)));\n    dispatch(setVehicles(vehiclesData.map(vehicle => vehicle.name)));\n    dispatch(setSpecies(speciesData.map(specie => specie.name)));\n  } catch (error) {\n    console.error('Error fetching film details:', error);\n    console.error('Response:', error.response);\n  }\n};","map":{"version":3,"names":["axios","SET_FILM_DETAILS","SET_CHARACTERS","SET_CHARACTER_NAMES","SET_PLANETS","SET_STARSHIPS","SET_VEHICLES","SET_SPECIES","setFilmDetails","filmDetails","type","payload","setCharacters","characters","setCharacterNames","characterNames","setPlanets","planets","setStarships","starships","setVehicles","vehicles","setSpecies","species","fetchFilmDetails","filmId","dispatch","response","get","filmData","data","Promise","all","films","map","filmUrl","filmResponse","title","url","charactersData","characterUrl","characterResponse","characterData","name","planetsData","planetUrl","planetResponse","starshipsData","starshipUrl","starshipResponse","vehiclesData","vehicleUrl","vehicleResponse","speciesData","specieUrl","specieResponse","character","planet","starship","vehicle","specie","error","console"],"sources":["/Users/a1/react/swapi/src/store/aboutFilmActions.js"],"sourcesContent":["// AboutFilmAction.js\nimport axios from 'axios';\n\n// інші типи, які вам можуть знадобитися\n\nexport const SET_FILM_DETAILS = 'SET_FILM_DETAILS';\nexport const SET_CHARACTERS = 'SET_CHARACTERS';\nexport const SET_CHARACTER_NAMES = 'SET_CHARACTER_NAMES';\nexport const SET_PLANETS = 'SET_PLANETS';\nexport const SET_STARSHIPS = 'SET_STARSHIPS';\nexport const SET_VEHICLES = 'SET_VEHICLES';\nexport const SET_SPECIES = 'SET_SPECIES';\n\nexport const setFilmDetails = (filmDetails) => ({\n  type: SET_FILM_DETAILS,\n  payload: filmDetails,\n});\n\nexport const setCharacters = (characters) => ({\n  type: SET_CHARACTERS,\n  payload: characters,\n});\n\nexport const setCharacterNames = (characterNames) => ({\n  type: SET_CHARACTER_NAMES,\n  payload: characterNames,\n});\n\nexport const setPlanets = (planets) => ({\n  type: SET_PLANETS,\n  payload: planets,\n});\n\nexport const setStarships = (starships) => ({\n  type: SET_STARSHIPS,\n  payload: starships,\n});\n\nexport const setVehicles = (vehicles) => ({\n  type: SET_VEHICLES,\n  payload: vehicles,\n});\n\nexport const setSpecies = (species) => ({\n  type: SET_SPECIES,\n  payload: species,\n});\n\nexport const fetchFilmDetails = (filmId) => async (dispatch) => {\n  try {\n    const response = await axios.get(`https://swapi.dev/api/films/${filmId}`);\n    const filmData = response.data;\n\n    const setFilmDetails = await Promise.all(\n      filmData.films.map(async (filmUrl) => {\n        const filmResponse = await axios.get(filmUrl);\n        const filmData = filmResponse.data;\n        return { title: filmData.title, url: filmUrl };\n      })\n    );\n    \n\n    const charactersData = await Promise.all(\n      filmData.characters.map(async (characterUrl) => {\n        const characterResponse = await axios.get(characterUrl);\n        const characterData = characterResponse.data;\n        return { name: characterData.name, url: characterUrl };\n      })\n    );\n\n    const planetsData = await Promise.all(\n      filmData.planets.map(async (planetUrl) => {\n        const planetResponse = await axios.get(planetUrl);\n        return planetResponse.data;\n      })\n    );\n\n    const starshipsData = await Promise.all(\n      filmData.starships.map(async (starshipUrl) => {\n        const starshipResponse = await axios.get(starshipUrl);\n        return starshipResponse.data;\n      })\n    );\n\n    const vehiclesData = await Promise.all(\n      filmData.vehicles.map(async (vehicleUrl) => {\n        const vehicleResponse = await axios.get(vehicleUrl);\n        return vehicleResponse.data;\n      })\n    );\n\n    const speciesData = await Promise.all(\n      filmData.species.map(async (specieUrl) => {\n        const specieResponse = await axios.get(specieUrl);\n        return specieResponse.data;\n      })\n    );\n\n    dispatch(setFilmDetails(filmData));\n    dispatch(setCharacters(charactersData));\n    dispatch(setCharacterNames(charactersData.map(character => character.name)));\n    dispatch(setPlanets(planetsData.map(planet => planet.name)));\n    dispatch(setStarships(starshipsData.map(starship => starship.name)));\n    dispatch(setVehicles(vehiclesData.map(vehicle => vehicle.name)));\n    dispatch(setSpecies(speciesData.map(specie => specie.name)));\n  } catch (error) {\n    console.error('Error fetching film details:', error);\n    console.error('Response:', error.response);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}