{"ast":null,"code":"var _jsxFileName = \"/Users/a1/react/swapi/src/components/AboutFilm.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport star from '../img/star.jpeg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AboutFilm() {\n  _s();\n  var _location$state;\n  const location = useLocation();\n  const film = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.film;\n  const [characters, setCharacters] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [starships, setStarships] = useState([]);\n  const [vehicles, setVehicles] = useState([]);\n  const [species, setSpecies] = useState([]);\n  useEffect(() => {\n    if (film) {\n      const fetchCharacters = async () => {\n        const promises = film.characters.map(url => fetch(url).then(res => res.json()));\n        const characters = await Promise.all(promises);\n        setCharacters(characters);\n      };\n      fetchCharacters();\n    }\n  }, [film]);\n  useEffect(() => {\n    if (film) {\n      const fetchPlanets = async () => {\n        const promises = film.planets.map(url => fetch(url).then(res => res.json()));\n        const planets = await Promise.all(promises);\n        setPlanets(planets);\n      };\n      fetchPlanets();\n    }\n  }, [film]);\n  useEffect(() => {\n    if (film) {\n      const fetchStarships = async () => {\n        const promises = film.starships.map(url => fetch(url).then(res => res.json()));\n        const starships = await Promise.all(promises);\n        setStarships(starships);\n      };\n      fetchStarships();\n    }\n  }, [film]);\n  useEffect(() => {\n    if (film) {\n      const fetchVehicles = async () => {\n        const promises = film.vehicles.map(url => fetch(url).then(res => res.json()));\n        const vehicles = await Promise.all(promises);\n        setVehicles(vehicles);\n      };\n      fetchVehicles();\n    }\n  }, [film]);\n  useEffect(() => {\n    if (film) {\n      const fetchSpecies = async () => {\n        const promises = film.species.map(url => fetch(url).then(res => res.json()));\n        const species = await Promise.all(promises);\n        setSpecies(species);\n      };\n      fetchSpecies();\n    }\n  }, [film]);\n  console.log(characters);\n  if (!film) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"block\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: star,\n      alt: \"star\",\n      className: \"backStar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filmInfo\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", film.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Director: \", film.director]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Release Date: \", film.release_date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Produser: \", film.producer]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Opening: \", film.opening_crawl]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"planets\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"Planets\",\n          children: \"Planets:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), planets.map((planet, filmIndex) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: planet.name\n        }, filmIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"starships\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"Starships\",\n          children: \"Starships:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), starships.map((starship, filmIndex) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: starship.name\n        }, filmIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"vehicles\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"Vehicles\",\n          children: \"Vehicles:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), vehicles.map((vehicle, filmIndex) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: vehicle.name\n        }, filmIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"species\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"Species\",\n          children: \"Species:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), species.map((specie, filmIndex) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: specie.name\n        }, filmIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hero\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"Hero\",\n          children: \"Characters:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), characters.map((character, filmIndex) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: character.name\n        }, filmIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(AboutFilm, \"ba1BkR5HwJlUD+uRhJCKmZfA87Y=\", false, function () {\n  return [useLocation];\n});\n_c = AboutFilm;\nexport default AboutFilm;\nvar _c;\n$RefreshReg$(_c, \"AboutFilm\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","star","jsxDEV","_jsxDEV","AboutFilm","_s","_location$state","location","film","state","characters","setCharacters","planets","setPlanets","starships","setStarships","vehicles","setVehicles","species","setSpecies","fetchCharacters","promises","map","url","fetch","then","res","json","Promise","all","fetchPlanets","fetchStarships","fetchVehicles","fetchSpecies","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","className","src","alt","title","director","release_date","producer","opening_crawl","id","planet","filmIndex","name","starship","vehicle","specie","character","_c","$RefreshReg$"],"sources":["/Users/a1/react/swapi/src/components/AboutFilm.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport star from '../img/star.jpeg';\n\nfunction AboutFilm() {\n  const location = useLocation();\n  const film = location.state?.film;\n\n\n  const [characters, setCharacters] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [starships, setStarships] = useState([]);\n  const [vehicles, setVehicles] = useState([]);\n  const [species, setSpecies] = useState([]);\n\n\n  useEffect(() => {\n    if (film) {\n      const fetchCharacters = async () => {\n        const promises = film.characters.map((url) => fetch(url).then((res) => res.json()));\n        const characters = await Promise.all(promises);\n        setCharacters(characters);\n      };\n      fetchCharacters();\n    }\n  }, [film]);\n\n  useEffect(() => {\n    if (film) {\n      const fetchPlanets = async () => {\n        const promises = film.planets.map((url) => fetch(url).then((res) => res.json()));\n        const planets = await Promise.all(promises);\n        setPlanets(planets);\n      };\n      fetchPlanets();\n    }\n  }, [film]);\n\n  useEffect(() => {\n    if (film) {\n      const fetchStarships = async () => {\n        const promises = film.starships.map((url) => fetch(url).then((res) => res.json()));\n        const starships = await Promise.all(promises);\n        setStarships(starships);\n      };\n      fetchStarships();\n    }\n  }, [film]);\n\n  useEffect(() => {\n    if (film) {\n      const fetchVehicles = async () => {\n        const promises = film.vehicles.map((url) => fetch(url).then((res) => res.json()));\n        const vehicles = await Promise.all(promises);\n        setVehicles(vehicles);\n      };\n      fetchVehicles();\n    }\n  }, [film]);\n\n  useEffect(() => {\n    if (film) {\n      const fetchSpecies = async () => {\n        const promises = film.species.map((url) => fetch(url).then((res) => res.json()));\n        const species = await Promise.all(promises);\n        setSpecies(species);\n      };\n      fetchSpecies();\n    }\n  }, [film]);\n\n  \n\n  console.log(characters);\n  if (!film) {\n    return <p>No data available</p>;\n  }\n\n  return (\n    <div className='block'>\n      <img src={star} alt='star' className='backStar' />\n      <div className='filmInfo'>\n        <p> {film.title}</p>\n        <p>Director: {film.director}</p>\n        <p>Release Date: {film.release_date}</p>\n        <p>Produser: {film.producer}</p>\n        <p>Opening: {film.opening_crawl}</p>\n\n\n        <div className='planets'>\n          <p id = \"Planets\">Planets:</p>\n          {planets.map((planet, filmIndex) => (\n            <p key={filmIndex}>{planet.name}</p>\n          ))}\n        </div>\n\n        <div className=\"starships\">\n          <p id = \"Starships\">Starships:</p>\n          {starships.map((starship, filmIndex) => (\n            <p key={filmIndex}>{starship.name}</p>\n          ))}\n        </div>\n\n        <div className=\"vehicles\">\n          <p id = \"Vehicles\">Vehicles:</p>\n          {vehicles.map((vehicle, filmIndex) => (\n            <p key={filmIndex}>{vehicle.name}</p>\n          ))}\n        </div>\n\n        <div className=\"species\">\n          <p id = \"Species\">Species:</p>\n          {species.map((specie, filmIndex) => (\n            <p key={filmIndex}>{specie.name}</p>\n          ))}\n        </div>\n\n\n        <div className=\"hero\">\n          <p id = \"Hero\">Characters:</p>\n          {characters.map((character, filmIndex) => (\n            <p key={filmIndex}>{character.name}</p>\n          ))}\n        </div>\n\n        \n\n\n      </div>\n    </div>\n  );\n}\n\nexport default AboutFilm;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,IAAI,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAAA,IAAAC,eAAA;EACnB,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAMQ,IAAI,IAAAF,eAAA,GAAGC,QAAQ,CAACE,KAAK,cAAAH,eAAA,uBAAdA,eAAA,CAAgBE,IAAI;EAGjC,MAAM,CAACE,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACmB,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAG1CD,SAAS,CAAC,MAAM;IACd,IAAIU,IAAI,EAAE;MACR,MAAMY,eAAe,GAAG,MAAAA,CAAA,KAAY;QAClC,MAAMC,QAAQ,GAAGb,IAAI,CAACE,UAAU,CAACY,GAAG,CAAEC,GAAG,IAAKC,KAAK,CAACD,GAAG,CAAC,CAACE,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;QACnF,MAAMjB,UAAU,GAAG,MAAMkB,OAAO,CAACC,GAAG,CAACR,QAAQ,CAAC;QAC9CV,aAAa,CAACD,UAAU,CAAC;MAC3B,CAAC;MACDU,eAAe,CAAC,CAAC;IACnB;EACF,CAAC,EAAE,CAACZ,IAAI,CAAC,CAAC;EAEVV,SAAS,CAAC,MAAM;IACd,IAAIU,IAAI,EAAE;MACR,MAAMsB,YAAY,GAAG,MAAAA,CAAA,KAAY;QAC/B,MAAMT,QAAQ,GAAGb,IAAI,CAACI,OAAO,CAACU,GAAG,CAAEC,GAAG,IAAKC,KAAK,CAACD,GAAG,CAAC,CAACE,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;QAChF,MAAMf,OAAO,GAAG,MAAMgB,OAAO,CAACC,GAAG,CAACR,QAAQ,CAAC;QAC3CR,UAAU,CAACD,OAAO,CAAC;MACrB,CAAC;MACDkB,YAAY,CAAC,CAAC;IAChB;EACF,CAAC,EAAE,CAACtB,IAAI,CAAC,CAAC;EAEVV,SAAS,CAAC,MAAM;IACd,IAAIU,IAAI,EAAE;MACR,MAAMuB,cAAc,GAAG,MAAAA,CAAA,KAAY;QACjC,MAAMV,QAAQ,GAAGb,IAAI,CAACM,SAAS,CAACQ,GAAG,CAAEC,GAAG,IAAKC,KAAK,CAACD,GAAG,CAAC,CAACE,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;QAClF,MAAMb,SAAS,GAAG,MAAMc,OAAO,CAACC,GAAG,CAACR,QAAQ,CAAC;QAC7CN,YAAY,CAACD,SAAS,CAAC;MACzB,CAAC;MACDiB,cAAc,CAAC,CAAC;IAClB;EACF,CAAC,EAAE,CAACvB,IAAI,CAAC,CAAC;EAEVV,SAAS,CAAC,MAAM;IACd,IAAIU,IAAI,EAAE;MACR,MAAMwB,aAAa,GAAG,MAAAA,CAAA,KAAY;QAChC,MAAMX,QAAQ,GAAGb,IAAI,CAACQ,QAAQ,CAACM,GAAG,CAAEC,GAAG,IAAKC,KAAK,CAACD,GAAG,CAAC,CAACE,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;QACjF,MAAMX,QAAQ,GAAG,MAAMY,OAAO,CAACC,GAAG,CAACR,QAAQ,CAAC;QAC5CJ,WAAW,CAACD,QAAQ,CAAC;MACvB,CAAC;MACDgB,aAAa,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAACxB,IAAI,CAAC,CAAC;EAEVV,SAAS,CAAC,MAAM;IACd,IAAIU,IAAI,EAAE;MACR,MAAMyB,YAAY,GAAG,MAAAA,CAAA,KAAY;QAC/B,MAAMZ,QAAQ,GAAGb,IAAI,CAACU,OAAO,CAACI,GAAG,CAAEC,GAAG,IAAKC,KAAK,CAACD,GAAG,CAAC,CAACE,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;QAChF,MAAMT,OAAO,GAAG,MAAMU,OAAO,CAACC,GAAG,CAACR,QAAQ,CAAC;QAC3CF,UAAU,CAACD,OAAO,CAAC;MACrB,CAAC;MACDe,YAAY,CAAC,CAAC;IAChB;EACF,CAAC,EAAE,CAACzB,IAAI,CAAC,CAAC;EAIV0B,OAAO,CAACC,GAAG,CAACzB,UAAU,CAAC;EACvB,IAAI,CAACF,IAAI,EAAE;IACT,oBAAOL,OAAA;MAAAiC,QAAA,EAAG;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACjC;EAEA,oBACErC,OAAA;IAAKsC,SAAS,EAAC,OAAO;IAAAL,QAAA,gBACpBjC,OAAA;MAAKuC,GAAG,EAAEzC,IAAK;MAAC0C,GAAG,EAAC,MAAM;MAACF,SAAS,EAAC;IAAU;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClDrC,OAAA;MAAKsC,SAAS,EAAC,UAAU;MAAAL,QAAA,gBACvBjC,OAAA;QAAAiC,QAAA,GAAG,GAAC,EAAC5B,IAAI,CAACoC,KAAK;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpBrC,OAAA;QAAAiC,QAAA,GAAG,YAAU,EAAC5B,IAAI,CAACqC,QAAQ;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChCrC,OAAA;QAAAiC,QAAA,GAAG,gBAAc,EAAC5B,IAAI,CAACsC,YAAY;MAAA;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxCrC,OAAA;QAAAiC,QAAA,GAAG,YAAU,EAAC5B,IAAI,CAACuC,QAAQ;MAAA;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChCrC,OAAA;QAAAiC,QAAA,GAAG,WAAS,EAAC5B,IAAI,CAACwC,aAAa;MAAA;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAGpCrC,OAAA;QAAKsC,SAAS,EAAC,SAAS;QAAAL,QAAA,gBACtBjC,OAAA;UAAG8C,EAAE,EAAG,SAAS;UAAAb,QAAA,EAAC;QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,EAC7B5B,OAAO,CAACU,GAAG,CAAC,CAAC4B,MAAM,EAAEC,SAAS,kBAC7BhD,OAAA;UAAAiC,QAAA,EAAoBc,MAAM,CAACE;QAAI,GAAvBD,SAAS;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAkB,CACpC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAENrC,OAAA;QAAKsC,SAAS,EAAC,WAAW;QAAAL,QAAA,gBACxBjC,OAAA;UAAG8C,EAAE,EAAG,WAAW;UAAAb,QAAA,EAAC;QAAU;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,EACjC1B,SAAS,CAACQ,GAAG,CAAC,CAAC+B,QAAQ,EAAEF,SAAS,kBACjChD,OAAA;UAAAiC,QAAA,EAAoBiB,QAAQ,CAACD;QAAI,GAAzBD,SAAS;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAoB,CACtC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAENrC,OAAA;QAAKsC,SAAS,EAAC,UAAU;QAAAL,QAAA,gBACvBjC,OAAA;UAAG8C,EAAE,EAAG,UAAU;UAAAb,QAAA,EAAC;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,EAC/BxB,QAAQ,CAACM,GAAG,CAAC,CAACgC,OAAO,EAAEH,SAAS,kBAC/BhD,OAAA;UAAAiC,QAAA,EAAoBkB,OAAO,CAACF;QAAI,GAAxBD,SAAS;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAmB,CACrC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAENrC,OAAA;QAAKsC,SAAS,EAAC,SAAS;QAAAL,QAAA,gBACtBjC,OAAA;UAAG8C,EAAE,EAAG,SAAS;UAAAb,QAAA,EAAC;QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,EAC7BtB,OAAO,CAACI,GAAG,CAAC,CAACiC,MAAM,EAAEJ,SAAS,kBAC7BhD,OAAA;UAAAiC,QAAA,EAAoBmB,MAAM,CAACH;QAAI,GAAvBD,SAAS;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAkB,CACpC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAGNrC,OAAA;QAAKsC,SAAS,EAAC,MAAM;QAAAL,QAAA,gBACnBjC,OAAA;UAAG8C,EAAE,EAAG,MAAM;UAAAb,QAAA,EAAC;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,EAC7B9B,UAAU,CAACY,GAAG,CAAC,CAACkC,SAAS,EAAEL,SAAS,kBACnChD,OAAA;UAAAiC,QAAA,EAAoBoB,SAAS,CAACJ;QAAI,GAA1BD,SAAS;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAqB,CACvC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACnC,EAAA,CA/HQD,SAAS;EAAA,QACCJ,WAAW;AAAA;AAAAyD,EAAA,GADrBrD,SAAS;AAiIlB,eAAeA,SAAS;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}